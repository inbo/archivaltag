[{"path":[]},{"path":"/CODE_OF_CONDUCT.html","id":"our-pledge","dir":"","previous_headings":"","what":"Our Pledge","title":"Contributor Covenant Code of Conduct","text":"members, contributors, leaders pledge make participation community harassment-free experience everyone, regardless age, body size, visible invisible disability, ethnicity, sex characteristics, gender identity expression, level experience, education, socio-economic status, nationality, personal appearance, race, caste, color, religion, sexual identity orientation. pledge act interact ways contribute open, welcoming, diverse, inclusive, healthy community.","code":""},{"path":"/CODE_OF_CONDUCT.html","id":"our-standards","dir":"","previous_headings":"","what":"Our Standards","title":"Contributor Covenant Code of Conduct","text":"Examples behavior contributes positive environment community include: Demonstrating empathy kindness toward people respectful differing opinions, viewpoints, experiences Giving gracefully accepting constructive feedback Accepting responsibility apologizing affected mistakes, learning experience Focusing best just us individuals, overall community Examples unacceptable behavior include: use sexualized language imagery, sexual attention advances kind Trolling, insulting derogatory comments, personal political attacks Public private harassment Publishing others’ private information, physical email address, without explicit permission conduct reasonably considered inappropriate professional setting","code":""},{"path":"/CODE_OF_CONDUCT.html","id":"enforcement-responsibilities","dir":"","previous_headings":"","what":"Enforcement Responsibilities","title":"Contributor Covenant Code of Conduct","text":"Community leaders responsible clarifying enforcing standards acceptable behavior take appropriate fair corrective action response behavior deem inappropriate, threatening, offensive, harmful. Community leaders right responsibility remove, edit, reject comments, commits, code, wiki edits, issues, contributions aligned Code Conduct, communicate reasons moderation decisions appropriate.","code":""},{"path":"/CODE_OF_CONDUCT.html","id":"scope","dir":"","previous_headings":"","what":"Scope","title":"Contributor Covenant Code of Conduct","text":"Code Conduct applies within community spaces, also applies individual officially representing community public spaces. Examples representing community include using official e-mail address, posting via official social media account, acting appointed representative online offline event.","code":""},{"path":"/CODE_OF_CONDUCT.html","id":"enforcement","dir":"","previous_headings":"","what":"Enforcement","title":"Contributor Covenant Code of Conduct","text":"Instances abusive, harassing, otherwise unacceptable behavior may reported community leaders responsible enforcement codeofconduct@posit.co. complaints reviewed investigated promptly fairly. community leaders obligated respect privacy security reporter incident.","code":""},{"path":"/CODE_OF_CONDUCT.html","id":"enforcement-guidelines","dir":"","previous_headings":"","what":"Enforcement Guidelines","title":"Contributor Covenant Code of Conduct","text":"Community leaders follow Community Impact Guidelines determining consequences action deem violation Code Conduct:","code":""},{"path":"/CODE_OF_CONDUCT.html","id":"id_1-correction","dir":"","previous_headings":"Enforcement Guidelines","what":"1. Correction","title":"Contributor Covenant Code of Conduct","text":"Community Impact: Use inappropriate language behavior deemed unprofessional unwelcome community. Consequence: private, written warning community leaders, providing clarity around nature violation explanation behavior inappropriate. public apology may requested.","code":""},{"path":"/CODE_OF_CONDUCT.html","id":"id_2-warning","dir":"","previous_headings":"Enforcement Guidelines","what":"2. Warning","title":"Contributor Covenant Code of Conduct","text":"Community Impact: violation single incident series actions. Consequence: warning consequences continued behavior. interaction people involved, including unsolicited interaction enforcing Code Conduct, specified period time. includes avoiding interactions community spaces well external channels like social media. Violating terms may lead temporary permanent ban.","code":""},{"path":"/CODE_OF_CONDUCT.html","id":"id_3-temporary-ban","dir":"","previous_headings":"Enforcement Guidelines","what":"3. Temporary Ban","title":"Contributor Covenant Code of Conduct","text":"Community Impact: serious violation community standards, including sustained inappropriate behavior. Consequence: temporary ban sort interaction public communication community specified period time. public private interaction people involved, including unsolicited interaction enforcing Code Conduct, allowed period. Violating terms may lead permanent ban.","code":""},{"path":"/CODE_OF_CONDUCT.html","id":"id_4-permanent-ban","dir":"","previous_headings":"Enforcement Guidelines","what":"4. Permanent Ban","title":"Contributor Covenant Code of Conduct","text":"Community Impact: Demonstrating pattern violation community standards, including sustained inappropriate behavior, harassment individual, aggression toward disparagement classes individuals. Consequence: permanent ban sort public interaction within community.","code":""},{"path":"/CODE_OF_CONDUCT.html","id":"attribution","dir":"","previous_headings":"","what":"Attribution","title":"Contributor Covenant Code of Conduct","text":"Code Conduct adapted Contributor Covenant, version 2.1, available https://www.contributor-covenant.org/version/2/1/code_of_conduct.html. Community Impact Guidelines inspired [Mozilla’s code conduct enforcement ladder][https://github.com/mozilla/inclusion]. answers common questions code conduct, see FAQ https://www.contributor-covenant.org/faq. Translations available https://www.contributor-covenant.org/translations.","code":""},{"path":"/CONTRIBUTING.html","id":null,"dir":"","previous_headings":"","what":"Contributing to archivaltag","title":"Contributing to archivaltag","text":"outlines propose change archivaltag. detailed discussion contributing tidyverse packages, please see development contributing guide code review principles.","code":""},{"path":"/CONTRIBUTING.html","id":"fixing-typos","dir":"","previous_headings":"","what":"Fixing typos","title":"Contributing to archivaltag","text":"can fix typos, spelling mistakes, grammatical errors documentation directly using GitHub web interface, long changes made source file. generally means ’ll need edit roxygen2 comments .R, .Rd file. can find .R file generates .Rd reading comment first line.","code":""},{"path":"/CONTRIBUTING.html","id":"bigger-changes","dir":"","previous_headings":"","what":"Bigger changes","title":"Contributing to archivaltag","text":"want make bigger change, ’s good idea first file issue make sure someone team agrees ’s needed. ’ve found bug, please file issue illustrates bug minimal reprex (also help write unit test, needed). See guide create great issue advice.","code":""},{"path":"/CONTRIBUTING.html","id":"pull-request-process","dir":"","previous_headings":"Bigger changes","what":"Pull request process","title":"Contributing to archivaltag","text":"Fork package clone onto computer. haven’t done , recommend using usethis::create_from_github(\"inbo/archivaltag\", fork = TRUE). Install development dependencies devtools::install_dev_deps(), make sure package passes R CMD check running devtools::check(). R CMD check doesn’t pass cleanly, ’s good idea ask help continuing. Create Git branch pull request (PR). recommend using usethis::pr_init(\"brief-description--change\"). Make changes, commit git, create PR running usethis::pr_push(), following prompts browser. title PR briefly describe change. body PR contain Fixes #issue-number. user-facing changes, add bullet top NEWS.md (.e. just first header). Follow style described https://style.tidyverse.org/news.html.","code":""},{"path":"/CONTRIBUTING.html","id":"code-style","dir":"","previous_headings":"Bigger changes","what":"Code style","title":"Contributing to archivaltag","text":"New code follow tidyverse style guide. can use styler package apply styles, please don’t restyle code nothing PR. use roxygen2, Markdown syntax, documentation. use testthat unit tests. Contributions test cases included easier accept.","code":""},{"path":"/CONTRIBUTING.html","id":"code-of-conduct","dir":"","previous_headings":"","what":"Code of Conduct","title":"Contributing to archivaltag","text":"Please note archivaltag project released Contributor Code Conduct. contributing project agree abide terms.","code":""},{"path":"/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2024 Research Institute Nature Forest (INBO) Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"/articles/G5pdst.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"G5pdst","text":"document contains instructions pseudo code parse read archival tag data collected G5pdst tags (Cefas technology).","code":""},{"path":"/articles/G5pdst.html","id":"metadata","dir":"Articles","previous_headings":"","what":"Metadata","title":"G5pdst","text":"Metadata start begin file. define metadata end. Metadata end line starts specific pattern depends firmware version/build level. Firmware version build level first important metadata must detect. lines containing information start \"Firmware Version ,\" \"Firmware Build Level\" respectively. way extract firmware version using following regex: (?<=Firmware Version ,).*. similar regex firmware. document refer firmware version build level form version.build_level, e.g. 3.40. However, mandatory. moment writing analysed data following firmware-version.build-level pairs: 3.80 3.40 2.70 string defining end metadata section : 3.80 3.40: \"Daylog data last deployment\" 2.70: \"following data Daylog contents\" Notice also end metadata section defines automatically start daylog section. next information extract tag ID. can extract using regex: (?<=Tag ID,)[-Z|0-9]* line starting string \"Tag ID\". Another important information number sensors embeded tag. information can found line starting \"sensors\". Regex: (?<=sensors ,).*. files firmware-version.build-level = 3.80 number days tag alive mentioned metadata. can search line starting \"Total Days Alive\". Regex: (?<=\\= )\\d+. limited extract essential metadata information. Extracting metadata totally possible, course. pseudo code recap.","code":"// Get firmware version and build level WHILE line NOT START WITH \"TAG ID\"   IF line START WITH \"Firmware Version No,\"       firmware = EXTRACT FROM line WITH regex \"(?<=Firmware Version No,).*\"   IF line START WITH \"Firmware Version No,\"       build_level = EXTRACT FROM line WITH regex \"(?<=Firmware Build Level,).*\"   READ next line version = firmware.build_level  // Detect pattern (p) which ends the metadata section IF (version IN (\"3.80\", \"3.40\"))   p = \"Daylog data for last deployment\" ELSE IF (version == \"2.70\")   p = \"The following data are the Daylog contents\" ELSE ERROR: 'version not supported'  // Parse the rest of metadata. It can be extended. WHILE line NOT START WITH p      // TagID   IF line START WITH \"Tag ID\"     tagID = EXTRACT FROM line WITH regex \"(?<=Tag ID,)[A-Z|0-9]*\"      // Number of sensors   IF line START WITH \"No of sensors ,\"     sensorsNo = EXTRACT FROM line WITH regex \"(?<=No of sensors ,).*\"      // Total days deployment duration   IF line START WITH \"Total Days Alive\"     deployment_days = EXTRACT FROM line WITH regex \"(?<=\\= )\\d+\""},{"path":"/articles/G5pdst.html","id":"daylog","dir":"Articles","previous_headings":"","what":"Daylog","title":"G5pdst","text":"daylog section follows metadata. pattern used find end metadata section marks begin daylog section. empty line marks end section. first line pattern contains column names. can alternatively use match condition line column names starts always \"Mission Day\". column names data following lines comma separated.","code":"WHILE line NOT EQUAL TO \"\"      // Detect column names   IF line START WITH \"Mission Day\"     col_names = SPLIT line BY \",\"   // Detect and add data row   ELSE      daylog += SPLIT line BY \",\""},{"path":"/articles/G5pdst.html","id":"data-blocks","dir":"Articles","previous_headings":"","what":"Data blocks","title":"G5pdst","text":"data blocks follow daylog section. separated deveral empty lines. Data blocks numbered starting 0. , first data block can detected line called \"Data Block 0\". number lines follow containing important sensor data related information, see : particular, number “data points available” can useful allows us identify start end block easily. Let’s call n, example n = 591736. also let’s say line number . column names data block defined line +1 comma separated. sensor variable(s) /defined next “Date/Time Stamp,”. example know data block refers \"Pressure\" values. case acceleration data, three variables: \"Gee X,Gee Y, Gee Z\". last line data block number +1+n. second data block, Data Block 1, can start end first data block. two data blocks separated several empty lines. Notice number measurements per time unit sensor dependent. example tag measuring pressure temperature: Notice logging rate number seconds two measurements: 30 seconds pressure 5 minutes, 300s, temperature.","code":"Data Block 0 Start Time = 01/09/2008 00:01:00 Stop Time = 01/09/2009 00:01:00 Logging rate = 30 Resolution = 12 Data points available = 591736 Date/Time Stamp,Pressure Data Block 0 Start Time = 01/09/2008 00:01:00 Stop Time = 01/09/2009 00:01:00 Logging rate = 30 Resolution = 12 Data points available = 591736 Date/Time Stamp,Pressure 01/09/2008 00:01:00,1.37 01/09/2008 00:01:30,1.37 01/09/2008 00:02:00,1.37 01/09/2008 00:02:30,1.37 ... Data Block 1 Start Time = 01/09/2008 00:01:00 Stop Time = 01/09/2009 00:01:00 Logging rate = 300 Resolution = 12 Data points available = 59172 Date/Time Stamp,Temp 01/09/2008 00:01:00,20.813 01/09/2008 00:06:00,20.797 01/09/2008 00:11:00,20.797 01/09/2008 00:16:00,20.797 ..."},{"path":"/articles/G5pdst.html","id":"issues","dir":"Articles","previous_headings":"","what":"Issues","title":"G5pdst","text":"list issues found reading file A15881_04-09-2020.csv. Even can exclude file imported, gives us idea reasons behind potential parsing errors. One commas end line. cleaning performed along entire file removing regex pattern \",{5,}\" line. Data block 0 doesn’t exists, Data block 1. datetime format constant along data block. d/m/y H:M d/m/y H:M:S used. datetime values unique, repeated multiple rows. occurs rows datetime format d/m/y H:M. Seconds can added assessing number rows per datetime: 30 rows per minute, datetime values separated 2 seconds, 60 rows present, separated 1 second.","code":""},{"path":"/articles/archival-tags-data-structure.html","id":"archival-tag-data-structure","dir":"Articles","previous_headings":"","what":"Archival tag data structure","title":"Archival tags data structure","text":"Archival tag data typically text files created tag manufacturers’ specific software. content files vary lot. However, can find three typical sections: - metadata - daylog - data blocks","code":""},{"path":"/articles/archival-tags-data-structure.html","id":"metadata","dir":"Articles","previous_headings":"Archival tag data structure","what":"Metadata","title":"Archival tags data structure","text":"Metadata contain general information tag (tagID), number sensors, software versions start/end deployment. Notice manufacturer always mentioned metadata. found important information parse archival tag text files : Firmware Version Number Firmware Build Level experience tells us different firmware version-build levels can lead different data formats. Metadata section starts always begin file. example metadata related G5pdst tag (Cefas technology) containing two sensors: type sensors (pressure, temperature, …) (always) explicitly correctly mentioned metadata. reason recommend infer information metadata.","code":"Comment :- NOTE times are BST, as tag clock was set to BST  The following data are the ID block contents Firmware Version No,2 Firmware Build Level,70   The following data are the Tag notebook contents Mission Day,211 Last Deployment Date,26/08/2008 17:00:00 Deployed by Host Version, 3. 9. 0 Downloaded by Host Version,5.7.0 Last Clock Set Date,19/08/2008 15:33:00  The following data are the Lifetime notebook contents Tag ID,A03486 Pressure Range ,100 No of sensors ,2"},{"path":"/articles/archival-tags-data-structure.html","id":"daylog","dir":"Articles","previous_headings":"Archival tag data structure","what":"Daylog","title":"Archival tags data structure","text":"daylog section contains general information day level. ’s important know also section always present. Example G5pdst tag (Cefas technology):","code":"The following data are the Daylog contents Mission Day,Date,Max Temp,Min Temp,Max Depth,Min Depth,Batt Volts 0,26/08/2008,28.094,23.891,0.62,0.12,3.13 1,27/08/2008,29.406,23.313,1.37,0.12,3.13"},{"path":"/articles/archival-tags-data-structure.html","id":"data-blocks","dir":"Articles","previous_headings":"Archival tag data structure","what":"Data blocks","title":"Archival tags data structure","text":"data blocks contain sensor information. moment encountered files containing one two data blocks , .e. tags one two sensors. first lines two data blocks G5pdst tag (Cefas technology). First data block containing pressure data: Second data block containing temperature (Temp column) data:","code":"Data Block 0 Start Time = 01/09/2008 00:01:00 Stop Time = 01/09/2009 00:01:00 Logging rate = 30 Resolution = 12 Data points available = 591736 Date/Time Stamp,Pressure 01/09/2008 00:01:00,1.37 01/09/2008 00:01:30,1.37 01/09/2008 00:02:00,1.37 Data Block 1 Start Time = 01/09/2008 00:01:00 Stop Time = 01/09/2009 00:01:00 Logging rate = 300 Resolution = 12 Data points available = 59172 Date/Time Stamp,Temp 01/09/2008 00:01:00,20.813 01/09/2008 00:06:00,20.797 01/09/2008 00:11:00,20.797 ..."},{"path":"/articles/how-to-import-archival-tags.html","id":"archival-tag-data-structure","dir":"Articles","previous_headings":"","what":"Archival tag data structure","title":"Archival tags data structure","text":"Archival tag data typically text files created tag manufacturers’ specific software. content files vary lot. However, can find three typical sections: - metadata - daylog - data blocks","code":""},{"path":"/articles/how-to-import-archival-tags.html","id":"metadata","dir":"Articles","previous_headings":"Archival tag data structure","what":"Metadata","title":"Archival tags data structure","text":"Metadata contain general information tag (tagID), number sensors, software versions start/end deployment. Notice manufacturer always mentioned metadata. found important information parse archival tag text files : Firmware Version Number Firmware Build Level experience tells us different firmware version-build levels can lead different data formats. Metadata section starts always begin file. example metadata related G5pdst tag (Cefas technology) containing two sensors: type sensors (pressure, temperature, …) (always) explicitly correctly mentioned metadata. reason recommend infer information metadata.","code":"Comment :- NOTE times are BST, as tag clock was set to BST  The following data are the ID block contents Firmware Version No,2 Firmware Build Level,70   The following data are the Tag notebook contents Mission Day,211 Last Deployment Date,26/08/2008 17:00:00 Deployed by Host Version, 3. 9. 0 Downloaded by Host Version,5.7.0 Last Clock Set Date,19/08/2008 15:33:00  The following data are the Lifetime notebook contents Tag ID,A03486 Pressure Range ,100 No of sensors ,2"},{"path":"/articles/how-to-import-archival-tags.html","id":"daylog","dir":"Articles","previous_headings":"Archival tag data structure","what":"Daylog","title":"Archival tags data structure","text":"daylog section contains general information day level. ’s important know also section always present. Example G5pdst tag (Cefas technology):","code":"The following data are the Daylog contents Mission Day,Date,Max Temp,Min Temp,Max Depth,Min Depth,Batt Volts 0,26/08/2008,28.094,23.891,0.62,0.12,3.13 1,27/08/2008,29.406,23.313,1.37,0.12,3.13"},{"path":"/articles/how-to-import-archival-tags.html","id":"data-blocks","dir":"Articles","previous_headings":"Archival tag data structure","what":"Data blocks","title":"Archival tags data structure","text":"data blocks contain sensor information. moment encountered files containing one two data blocks , .e. tags one two sensors. first lines two data blocks G5pdst tag (Cefas technology). First data block containing pressure data: Second data block containing temperature (Temp column) data:","code":"Data Block 0 Start Time = 01/09/2008 00:01:00 Stop Time = 01/09/2009 00:01:00 Logging rate = 30 Resolution = 12 Data points available = 591736 Date/Time Stamp,Pressure 01/09/2008 00:01:00,1.37 01/09/2008 00:01:30,1.37 01/09/2008 00:02:00,1.37 Data Block 1 Start Time = 01/09/2008 00:01:00 Stop Time = 01/09/2009 00:01:00 Logging rate = 300 Resolution = 12 Data points available = 59172 Date/Time Stamp,Temp 01/09/2008 00:01:00,20.813 01/09/2008 00:06:00,20.797 01/09/2008 00:11:00,20.797 ..."},{"path":"/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Damiano Oldoni. Author, maintainer. Pieterjan Verhelst. Author. Research Institute Nature Forest (INBO). Copyright holder.            https://www.vlaanderen./inbo/en-gb/ . Funder.            https://lifewatch.","code":""},{"path":"/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Oldoni D, Verhelst P (2024). archivaltag: Read Archival Tag Data. R package version 0.0.0.9000, https://github.com/inbo/archivaltag.","code":"@Manual{,   title = {archivaltag: Read Archival Tag Data},   author = {Damiano Oldoni and Pieterjan Verhelst},   year = {2024},   note = {R package version 0.0.0.9000},   url = {https://github.com/inbo/archivaltag}, }"},{"path":"/index.html","id":"archivaltag","dir":"","previous_headings":"","what":"Read Archival Tag Data","title":"Read Archival Tag Data","text":"goal archivaltag read archival tag data. data stored differently depending manufacturer model. Also, data different depending sensors built .","code":""},{"path":"/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Read Archival Tag Data","text":"can install development version archivaltag GitHub :","code":"# install.packages(\"devtools\") devtools::install_github(\"inbo/archivaltag\")"},{"path":"/index.html","id":"example","dir":"","previous_headings":"","what":"Example","title":"Read Archival Tag Data","text":"basic example shows solve common problem:","code":"library(archivaltag) ## basic example code"},{"path":"/reference/read_file.html","id":null,"dir":"Reference","previous_headings":"","what":"Read archival tag sensor data files. — read_file","title":"Read archival tag sensor data files. — read_file","text":"Read archival tag sensor data files.","code":""},{"path":"/reference/read_file.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Read archival tag sensor data files. — read_file","text":"","code":"read_file(file, manufacturer, model, sensors)"},{"path":"/reference/read_file.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Read archival tag sensor data files. — read_file","text":"file character path archival tag data file. manufacturer character vector length 1 manufacturer tag. model character vector length 1 model tag. sensors character vector sensors embedded tags, e.g. \"temperature\", \"pression\". tag can contain multiple sensors.","code":""},{"path":"/reference/read_file.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Read archival tag sensor data files. — read_file","text":"list three elements: track_tag_id: character ID tag daylog: tibble data.frame daylog information sensor: tibble data.frame sensor data","code":""},{"path":"/reference/read_file.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Read archival tag sensor data files. — read_file","text":"","code":"# Read data collected by a CEFAS G5DST tag with pressure and temperature # sensors cefas_g5dst_press_temp <- system.file(   \"extdata\",   \"cefas_g5dst_pressure_temperature.csv\",   package = \"archivaltag\" ) archivaltag::read_file(   file = cefas_g5dst_press_temp,   manufacturer = \"cefas technology\",   model = \"G5dst\",   sensors = c(\"pressure\", \"temperature\") )"},{"path":"/reference/supported_tags.html","id":null,"dir":"Reference","previous_headings":"","what":"Supported manufacturers, models and sensors — supported_tags","title":"Supported manufacturers, models and sensors — supported_tags","text":"look-table manufacturers, models sensors supported archivaltag.","code":""},{"path":"/reference/supported_tags.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Supported manufacturers, models and sensors — supported_tags","text":"","code":"supported_tags"},{"path":"/reference/supported_tags.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Supported manufacturers, models and sensors — supported_tags","text":"object class tbl_df (inherits tbl, data.frame) 3 rows 3 columns.","code":""},{"path":"/reference/supported_tags.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Supported manufacturers, models and sensors — supported_tags","text":"","code":"if (FALSE) { # supported_tags.Rda was created with the code below. supported_tags <- tibble::tibble(   manufacturer = c(     \"cefas technology\",     \"cefas technology\",     \"star-oddi\"   ),   model = c(     \"G5dst\",     \"G5pdst\",     \"micro-td\"   ),   sensors = list(     list(\"temperature\", \"pressure\", \"acceleration\"),     list(\"temperature\", \"pressure\", \"acceleration\"),     list(\"temperature\", \"pressure\", \"acceleration\")   ) ) save(supported_tags, file = \"./data/supported_tags.rda\") }"}]
